cmake_minimum_required (VERSION 3.0)
project (qule)

if(APPLE)
    message("You are using an Apple system. Will not check CXX_COMPILER_VERSION.")
elseif(WIN32)
    message("You are using a Windows system. Will not check CXX_COMPILER_VERSION.")
else()
    if(${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
        if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.2)
            message(FATAL_ERROR "GCC version must be at least 5.2!")
        endif()
    else()
        message(FATAL_ERROR "You are using an unsupported compiler! Compilation has only been tested with GCC.")
    endif()
endif()

if(MSVC)
    SET(CMAKE_CXX_FLAGS "/openmp /O2 /std:c++latest /W4")
    ADD_DEFINITIONS("/EHsc")
else()
    SET(CMAKE_CXX_FLAGS "-std=c++14 -O3 -Wall -Wextra -pedantic -fopenmp")
endif()

#set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

add_subdirectory (LearningAlgorithms)
add_subdirectory (Functions)
add_subdirectory (LearningRates)

set(Boost_DEBUG OFF)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)
if(MSVC)
	list(APPEND CMAKE_PREFIX_PATH C:\\Boost\\boost_1_78_0)
endif()
find_package(Boost COMPONENTS system filesystem serialization program_options)
include_directories(${Boost_INCLUDE_DIRS})

if(UNIX)
    message("You are using a UNIX system. Will not check for MKL")
else()
    find_package(MKL REQUIRED)
    include_directories(${MKL_INCLUDE_DIR})
    message(STATUS "MKL DIR = ${MKL_INCLUDE_DIR}")
endif()

find_package(Armadillo REQUIRED)
if(UNIX)
	include_directories(${ARMADILLO_INCLUDE_DIR})
else()
	include_directories(${ARMADILLO_INCLUDE_DIR}\\Armadillo\\include)
endif()

if(Boost_FOUND)
    add_executable(qule main.cpp)
    target_link_libraries(qule LINK_PUBLIC ${MKL_LIBRARIES} ${ARMADILLO_LIBRARIES} Boost::system openblas lapack
            Boost::filesystem Boost::serialization Boost::program_options LearningRates Functions
            LearningAlgorithms)

    add_executable(gendata gendata.cpp)
    target_link_libraries(gendata LINK_PUBLIC Boost::system Boost::filesystem Boost::serialization Boost::program_options ${MKL_LIBRARIES} ${ARMADILLO_LIBRARIES} openblas lapack)
else()
	message(FATAL_ERROR "Could not find Boost!")
endif()
